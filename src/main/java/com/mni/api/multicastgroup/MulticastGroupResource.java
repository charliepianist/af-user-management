package com.mni.api.multicastgroup;

import com.mni.model.multicastgroup.MulticastGroup;
import com.mni.model.multicastgroup.MulticastGroupRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import javax.validation.Valid;
import java.util.ArrayList;
import java.util.Optional;

import static com.mni.api.multicastgroup.MulticastGroupDto.translateMulticastGroupDtoToMulticastGroup;
import static com.mni.api.multicastgroup.MulticastGroupDto.translateMulticastGroupToMulticastGroupDto;

@RestController
@RequestMapping("/api/multicast-groups")
public class MulticastGroupResource {

    @Autowired
    MulticastGroupRepository multicastGroupRepository;

    public static final int MAX_PAGE_SIZE = 100;
    public static final int DEFAULT_PAGE_SIZE = 20;
    public static final int MIN_PAGE_SIZE = 1;
    public static final String DEFAULT_SORT_FIELD = "name";

    // Returns whether a String is a sortable field of MulticastGroup
    private boolean isSortableField(String field) {
        return field.equals("id") || field.equals("name") || field.equals("ip") || field.equals("port");
    }

    //Attempt to save a multicast group, returns HTTP 400 Bad Request if something goes wrong
    private MulticastGroup trySaveMulticastGroup(MulticastGroup multicastGroup) {
        try{
            if(multicastGroup.getProducts() == null) multicastGroup.setProducts(new ArrayList());
            return multicastGroupRepository.save(multicastGroup);
        }catch(Exception e) {
            if(e instanceof DataIntegrityViolationException)
                // Unique index violation (Name)
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        "Name already taken");

            // In case of exception that isn't due to unique index or primary key violation
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                    "Invalid arguments for new multicastGroup");
        }
    }

    @GetMapping
    public Page<MulticastGroupDto> listMulticastGroups(@RequestParam(value="page", defaultValue="0") int page,
                                           @RequestParam(value="size", defaultValue=DEFAULT_PAGE_SIZE + "")
                                                   int size,
                                           @RequestParam(value="sortBy", defaultValue=DEFAULT_SORT_FIELD)
                                                   String sortBy,
                                           @RequestParam(value="desc", defaultValue="false") boolean desc
    ){
        if(page < 0) page = 0;
        if(size < MIN_PAGE_SIZE) size = MIN_PAGE_SIZE;
        if(size > MAX_PAGE_SIZE) size = MAX_PAGE_SIZE;
        if(!isSortableField(sortBy)) sortBy = DEFAULT_SORT_FIELD;

        Sort.Direction direction = desc ? Sort.Direction.DESC : Sort.Direction.ASC;
        Sort.Order order = new Sort.Order(direction, sortBy);
        order = order.ignoreCase();
        Sort sort = Sort.by(order);
        Pageable pageRequest = PageRequest.of(page, size, sort);
        return multicastGroupRepository
                .findAll(pageRequest)
                .map(MulticastGroupDto::translateMulticastGroupToMulticastGroupDto);
    }


    @GetMapping("{id}")
    public MulticastGroupDto getMulticastGroup(@PathVariable("id") Long id){
        Optional<MulticastGroup> multicastGroup = multicastGroupRepository.findById(id);

        if(!multicastGroup.isPresent())
            throw new ResponseStatusException(HttpStatus.NOT_FOUND); // Invalid ID
        return translateMulticastGroupToMulticastGroupDto(multicastGroup.get()); //Valid ID
    }

    @PostMapping
    public MulticastGroupDto saveMulticastGroup(@Valid @RequestBody MulticastGroupDto multicastGroupDto) {
        MulticastGroup inputMulticastGroup = translateMulticastGroupDtoToMulticastGroup(multicastGroupDto);
        inputMulticastGroup.setId(null); // ID should be autogenerated

        return translateMulticastGroupToMulticastGroupDto(trySaveMulticastGroup(inputMulticastGroup));
    }

    @PutMapping("{id}")
    public MulticastGroupDto updateMulticastGroup(@PathVariable Long id, @Valid @RequestBody MulticastGroupDto multicastGroupDto) {
        if(!multicastGroupRepository.existsById(id))
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);

        MulticastGroup inputMulticastGroup = translateMulticastGroupDtoToMulticastGroup(multicastGroupDto);
        inputMulticastGroup.setId(id);
        return translateMulticastGroupToMulticastGroupDto(trySaveMulticastGroup(inputMulticastGroup));
    }

    @DeleteMapping("{id}")
    public void deleteMulticastGroup(@PathVariable Long id) {
        Optional<MulticastGroup> optionalMulticastGroup = multicastGroupRepository.findById(id);
        if(optionalMulticastGroup.isPresent()) {
            MulticastGroup group = optionalMulticastGroup.get();
            group.getProducts().forEach(product -> {
                product.removeMulticastGroup(group);
            });

            multicastGroupRepository.deleteById(id);
        }else
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
    }
}

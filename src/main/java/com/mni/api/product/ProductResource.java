package com.mni.api.product;

import com.mni.api.multicastgroup.MulticastGroupDto;
import com.mni.model.multicastgroup.MulticastGroup;
import com.mni.model.multicastgroup.MulticastGroupRepository;
import com.mni.model.product.Product;
import com.mni.model.product.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Optional;

import static com.mni.api.product.ProductDto.translateProductDtoToProduct;
import static com.mni.api.product.ProductDto.translateProductToProductDto;

/**
 * Created by charles.liu on 6/26/19.
 */

@RestController
@RequestMapping("/api/products")
public class ProductResource {

    @Autowired
    private ProductRepository productRepository;
    @Autowired
    private MulticastGroupRepository multicastGroupRepository;

    public static final int MAX_PAGE_SIZE = 100;
    public static final int DEFAULT_PAGE_SIZE = 20;
    public static final int MIN_PAGE_SIZE = 1;
    public static final String DEFAULT_SORT_FIELD = "name";



    // Returns whether a String is a sortable field of Product
    private boolean isSortableField(String field) {
        return field.equals("id") || field.equals("name");
    }

    //Attempt to save a product, returns HTTP 400 Bad Request if something goes wrong
    private Product trySaveProduct(Product product) {
        try{
            if(product.getMulticastGroups() == null) product.setMulticastGroups(new ArrayList());
            return productRepository.save(product);
        }catch(Exception e) {
            if(e instanceof DataIntegrityViolationException)
                // Unique index violation (ID or Name)
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        "Name already taken");

            // In case of exception that isn't due to unique index or primary key violation
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                    "Invalid arguments for new product");
        }
    }

    @GetMapping
    public Page<ProductDto> listProducts(@RequestParam(value="page", defaultValue="0") int page,
                                      @RequestParam(value="size", defaultValue=DEFAULT_PAGE_SIZE + "")
                                              int size,
                                      @RequestParam(value="sortBy", defaultValue=DEFAULT_SORT_FIELD)
                                              String sortBy,
                                      @RequestParam(value="desc", defaultValue="false") boolean desc
    ){
        if(page < 0) page = 0;
        if(size < MIN_PAGE_SIZE) size = MIN_PAGE_SIZE;
        if(size > MAX_PAGE_SIZE) size = MAX_PAGE_SIZE;
        if(!isSortableField(sortBy)) sortBy = DEFAULT_SORT_FIELD;

        Sort.Direction direction = desc ? Sort.Direction.DESC : Sort.Direction.ASC;
        Sort.Order order = new Sort.Order(direction, sortBy);
        order = order.ignoreCase();
        Sort sort = Sort.by(order);
        Pageable pageRequest = PageRequest.of(page, size, sort);
        return productRepository
                .findAll(pageRequest)
                .map(ProductDto::translateProductToProductDto);
    }

    private Product getPersistedProduct(Long id) {
        Optional<Product> product = productRepository.findById(id);

        if(!product.isPresent())
            throw new ResponseStatusException(HttpStatus.NOT_FOUND); // Invalid ID
        return product.get();
    }

    @GetMapping("{id}")
    public ProductDto getProduct(@PathVariable("id") Long id){
        return translateProductToProductDto(getPersistedProduct(id)); //Valid ID
    }

    @GetMapping("{id}/multicast-groups")
    public Collection<MulticastGroupDto> getProductMulticastGroups(@PathVariable("id") Long id) {
        Collection<MulticastGroup> groups = getPersistedProduct(id).getMulticastGroups();
        return MulticastGroupDto.multicastGroupsToMulticastGroupDtos(groups);
    }

    @PostMapping
    public ProductDto saveProduct(@Valid @RequestBody ProductDto productDto) {
        Product inputProduct = translateProductDtoToProduct(productDto);
        inputProduct.setId(null); // ID should be autogenerated

        return translateProductToProductDto(trySaveProduct(inputProduct));
    }

    @PutMapping("{id}")
    public ProductDto updateProduct(@PathVariable Long id, @Valid @RequestBody ProductDto productDto) {
        Product product = getPersistedProduct(id);

        Product inputProduct = translateProductDtoToProduct(productDto);
        inputProduct.setId(id);
        inputProduct.setMulticastGroups(product.getMulticastGroups());

        return translateProductToProductDto(trySaveProduct(inputProduct));
    }

    @PutMapping("{id}/multicast-groups")
    public Collection<MulticastGroupDto> updateProductMulticastGroups(@PathVariable Long id,
                                                   @NotNull @RequestBody Collection<MulticastGroupDto> groupDtos) {
        Product product = getPersistedProduct(id);

        // add references to product to its new multicast groups
        product.setMulticastGroups(MulticastGroupDto.multicastGroupDtosToMulticastGroups(groupDtos));

        Product persistedProduct = trySaveProduct(product);
        return MulticastGroupDto.multicastGroupsToMulticastGroupDtos(persistedProduct.getMulticastGroups());
    }

    @DeleteMapping("{id}")
    public void deleteProduct(@PathVariable Long id) {
        try {
            productRepository.deleteById(id);
        }catch(EmptyResultDataAccessException e) {
            // Product with ID id does not exist
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        }
    }
}

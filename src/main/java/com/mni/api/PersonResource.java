package com.mni.api;

import com.mni.model.Person;
import com.mni.model.PersonRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import javax.validation.Valid;
import java.util.Optional;

/**
 * Created by will.schick on 6/17/19.
 */
@RestController
@RequestMapping("/api/people")
public class PersonResource {

    @Autowired
    PersonRepository personRepository;

    public static final int MAX_PAGE_SIZE = 100;
    public static final int DEFAULT_PAGE_SIZE = 20;
    public static final int MIN_PAGE_SIZE = 1;
    public static final String DEFAULT_SORT_FIELD = "id";

    // Translates Person object to PersonDto object
    private PersonDto translatePersonToPersonDto(Person person){
        PersonDto personDto = new PersonDto();
        personDto.setId(person.getId());
        personDto.setName(person.getName());
        personDto.setUserId(person.getUserId());
        personDto.setPassword(person.getPassword());
        return personDto;
    }

    // Translates PersonDto object to Person object
    private Person translatePersonDtoToPerson(PersonDto personDto) {
        Person person = new Person();
        person.setId(personDto.getId());
        person.setName(personDto.getName());
        person.setUserId(personDto.getUserId());
        person.setPassword(personDto.getPassword());
        return person;
    }

    // Returns whether a String is a field of Person
    private boolean isPersonField(String field) {
        return field.equals("id") || field.equals("name") || field.equals("userId") ||
                field.equals("password");
    }

    //Attempt to save a person, returns HTTP 400 Bad Request if something goes wrong
    private Person trySavePerson(Person person) {
        try{
            return personRepository.save(person);
        }catch(Exception e) {
            if(e instanceof DataIntegrityViolationException)
                // This happens when unique index or primary key violation occurs
                // or invalid data
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                        "Name or UserID already taken");

            // In case of exception that isn't due to unique index or primary key violation
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST,
                    "Invalid arguments for new user");
        }
    }

    @GetMapping
    public Page<PersonDto> listPeople(@RequestParam(value="page", defaultValue="0") int page,
                                      @RequestParam(value="size", defaultValue=DEFAULT_PAGE_SIZE + "")
                                              int size,
                                      @RequestParam(value="sortBy", defaultValue=DEFAULT_SORT_FIELD)
                                                  String sortBy,
                                      @RequestParam(value="desc", defaultValue="false") boolean desc
    ){
        if(page < 0) page = 0;
        if(size < MIN_PAGE_SIZE) size = MIN_PAGE_SIZE;
        if(size > MAX_PAGE_SIZE) size = MAX_PAGE_SIZE;
        if(!isPersonField(sortBy)) sortBy = DEFAULT_SORT_FIELD;

        Sort.Direction direction = desc ? Sort.Direction.DESC : Sort.Direction.ASC;
        Sort.Order order = new Sort.Order(direction, sortBy);
        if(!order.equals("password")) order = order.ignoreCase();
        Sort sort = Sort.by(order);
        Pageable pageRequest = PageRequest.of(page, size, sort);

        return personRepository
                .findAll(pageRequest)
                .map(this::translatePersonToPersonDto);
    }


    @GetMapping("{id}")
    PersonDto getPerson(@PathVariable("id") Long id){
        Optional<Person> person = personRepository.findById(id);

        if(!person.isPresent())
            throw new ResponseStatusException(HttpStatus.NOT_FOUND); // Invalid ID
        return translatePersonToPersonDto(person.get()); //Valid ID
    }

    @PostMapping
    PersonDto savePerson(@Valid @RequestBody PersonDto personDto) {
        Person inputPerson = translatePersonDtoToPerson(personDto);
        inputPerson.setId(null); // ID should be autogenerated

        return translatePersonToPersonDto(trySavePerson(inputPerson));
    }

    @PutMapping("{id}")
    PersonDto updatePerson(@PathVariable Long id, @Valid @RequestBody PersonDto personDto) {
        Person inputPerson = translatePersonDtoToPerson(personDto);

        inputPerson.setId(id);
        return translatePersonToPersonDto(trySavePerson(inputPerson));
    }

    @DeleteMapping("{id}")
    void deletePerson(@PathVariable Long id) {
        try {
            personRepository.deleteById(id);
        }catch(EmptyResultDataAccessException e) {
            // Person with ID id does not exist
            throw new ResponseStatusException(HttpStatus.NOT_FOUND);
        }
    }
}
